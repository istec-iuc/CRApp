# offline_scanner.py
import json
import os
from collections import defaultdict

def deduplicate_cve_items(cve_items):
    seen_ids = set()
    unique_items = []

    for item in cve_items:
        cve_id = item.get('id')
        if cve_id and cve_id not in seen_ids:
            seen_ids.add(cve_id)
            unique_items.append(item)

    return unique_items


#def load_cve_database(json_path="cveOffline/CVE-all.json"):
def load_cve_database(paths):
    cve_items = []

    for path in paths:
        if not os.path.exists(path):
            print(f"[ERROR] CVE JSON file not found at: {path}")
            return []

        try:
            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                cve_items.extend(data.get('cve_items', []))
        except json.JSONDecodeError:
            print(f"[ERROR] Invalid JSON format in {path}")
        except Exception as e:
            print(f"[ERROR] Failed to load CVE {path}: {e}") 
            
    #Dedublicate the merged CVE files
    cve_items = deduplicate_cve_items(cve_items)

    return build_cve_index(cve_items) if cve_items else []


def build_cve_index(cve_items):
    index = defaultdict(list)

    for item in cve_items:
        # Combine relevant searchable text fields
        text_blob = ''
        
        # Add descriptions
        for desc in item.get('descriptions', []):
            text_blob += desc.get('value', '') + ' '
        
        # Add CPE strings (match criteria)
        for config in item.get('configurations', []):
            for node in config.get('nodes', []):
                for cpe in node.get('cpeMatch', []):
                    text_blob += cpe.get('criteria', '') + ' '

        # Tokenize and index
        for word in set(text_blob.lower().split()):
            index[word].append(item)

    return index

#def scan_vulnerabilities_offline(components, cve_data):
def scan_vulnerabilities_offline(components):
    print('Components:')
    print(components)

    cve_files = [
    'cveOffline/CVE-all.json',
    'cveOffline/CVE-recent.json',
    'cveOffline/CVE-modified.json'
    ]

    print('START LOADING AND INDEXING THE CVE DATABASE')
    cve_index = load_cve_database(cve_files)
    print('END OF INDEXING. START SCANNING')

    results = []
    for comp in components:
        name = comp['component'].lower()
        #version = comp.get('version', '').lower()

        matches = cve_index.get(name, [])

        for item in matches:
            cve_id = item['id']

            # Get description
            description = next(
                (d['value'] for d in item.get('descriptions', []) if d['lang'] == 'en'),'Açıklama yok')

            """
            # Get CVSS score (v2 or v3 fallback)
            try:
                cvss = item['metrics']['cvssMetricV3'][0]['cvssData']['baseScore']
            except:
                try:
                    cvss = item['metrics']['cvssMetricV2'][0]['cvssData']['baseScore']
                except:
                    cvss = 'N/A'
            """

            # CVSS puanı en yüksek versiyona göre alınır, yoksa 'N/A' döner
            cvss_versions = ["cvssMetricV40", "cvssMetricV31", "cvssMetricV30", "cvssMetricV3", "cvssMetricV2"]
            cvss = "N/A"

            for version in cvss_versions:
                try:
                    cvss = item['metrics'][version][0]["cvssData"]["baseScore"]
                    break  # Bulduktan sonra döngüden çık
                except (KeyError, IndexError, TypeError):
                    continue

            results.append({
                'component': name,
                'cve': cve_id,
                'cvss': cvss,
                'desc': description
            })
            print('Scanned one item')
            print(cve_id)


    """
        for item in cve_data:
            cve_id = item['id']
            desc_data = item.get('descriptions', [])
            desc = desc_data[0]['value'] if desc_data else ''

            match = name in desc.lower()
            if not match:
                for config in item.get('configurations', []):
                    for node in config.get('nodes', []):
                        for cpe in node.get('cpeMatch', []):
                            cpe_uri = cpe.get('criteria', '').lower()
                            if name in cpe_uri and (not version or version in cpe_uri):
                                match = True

            if match:
                metrics = item.get('metrics', {})
                cvss = None
                if 'cvssMetricV31' in metrics:
                    cvss = metrics['cvssMetricV31'][0]['cvssData']['baseScore']
                elif 'cvssMetricV2' in metrics:
                    cvss = metrics['cvssMetricV2'][0]['cvssData']['baseScore']
                results.append({
                    'component': name,
                    'cve': cve_id,
                    'cvss': cvss or 0.0,
                    'desc': desc
                })
            print('Scanned one item')
            print(cve_id)

     """
    
    return results
